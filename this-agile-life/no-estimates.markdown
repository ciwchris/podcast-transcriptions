[Ep. 76 â€“ Contrivance of Humans (#NoEstimates)](http://www.thisAgilelife.com/76/)
=============================================

Released: March 15th, 2015

Hosts: John Sextro, Nate McKie and Lee McCauley

Guest: Woody Zuill

**This Agile Life:** Can you give an introduction to the topic of #noestimates and the idea of #noestimates

**Woody Zuill:** Yeah, so essentially #noestimates is a term that is a hash tag for use on twitter that I use for exploring the topic of alternatives to estimates of time cost and effort or any of those things for making decisions in software development that is ways to make decisions without estimates. So, it can mean a lot of things and it obviously means a lot of things to a lot of people. But I just used it as a way to circle around the people who were interested in discussing this idea. I first used it in a tweet about an article I wrote that was in response to someone who wanted to know well how exactly do you do this. I think I would like to talk about how later, if you bring that up. But in writing that article it really was an example of how I didn't need to use estimates to make certain types of decisions for a particular project I worked on and when I tweeted about it I said here is an example of using #noestimates for making decisions. So that's how it started it was purely I would say kind of serendipitous or kind of an accident and once it seemed to catch people's attention then it actually lead to many good things, so it stuck. It is a sticky thing. And I'm glad for that.

**This Agile Life:** That's pretty brave though, to put yourself out there for people to come and have a conversation about #noestimates. What's been the general sentiment from the conversations that you've had.

**Woody Zuill:** That's a good question because it really almost always starts out with well what do you mean and I share the little bit I just shared with you and the next question is well how do we do that. Which is a tricky question because it's very contextual. So the how of it is, we question the practices that we use. So in this case it's estimates. So that gives us something to question. If we are, and this is a very important part of it, if we are using estimates without really understanding why, it's a great place to question. Let's learn why, and it can't stop with because somebody asked me. Somebody is asking for estimates. That doesn't still tell us the why we are doing the estimates, so the why is up a level or two from that. It's really important for me to know what is the real purpose, because often when we do that we find out there is a better way to fill the purpose. I've done a bunch of 5 why's exercises, probably 30 or 40 either at sessions at conferences or privately with people and it always comes down to just a few things, the real reason why we are doing estimates. If it comes down to a reasonable purpose and the estimates are serving us well for that purpose then it's great. Let's use the estimates. But if it's not a good purpose or the estimates don't serve the purpose well that's a good thing to know as well.

**This Agile Life:** Have you had instances where you talked to people and you've actually come out with a situation were yeah, you should actually do estimates. Because every time I've talked to people about this there's almost always an answer that does not involve estimates in the classic sense.

**Woody Zuill:** Well, an important aspect of this to me is the questioning itself. When I first started talking about problems with estimates or issues I saw with estimates I got a very forceful response from people that we just need to do them. Now that's not in the workplace, I mean that comes in the workplace all the time, don't question what we are asking for, just do it. But I'm talking about at conferences, at Open Agiles or other Code Camps, whatever. I have this old talk I used to give about Agile success and one of the things I like to say that we have to question the things we have the most faith in, that we most truly believe more than anything else because that's where our biggest blind spot is.

**This Agile Life:** I so totally agree with you on so many levels, more than just software development, but go ahead.

**Woody Zuill:** Well that's the point, that it's right there, that goes for everything, even not just software development. But I'm mostly I would say involved with software development so my opinion in other realms probably doesn't count as much. My own feeling for myself is this, if I see a problem with something I want to get to the bottom of it. And it's often the things that we go 'it can't be that' that we probably need to look at first, because those are the things we are blinding ourselves to.

**This Agile Life:** I actually do want to get a little directly into the how of it because I have had experience with a team that the reason why estimates were done, and as a consultant and working for a consulting company, a lot of cases the estimates are so that the customer has a reasonable expectation of what their going to end up paying for whatever it is that we are trying to build for them. Even though we don't necessary have all the information up front they still want at least a ballpark of how much it's going to cost, right? So let's take that very basic sort of situation and talk through how we can do that in a #noestimates sort of way. Could you try that?

**Woody Zuill:** Okay, now, there are several different schools of thought on how to apply some kind of #noestimates kind of thinking but I believe in this case the way that I think about it for myself is that we've only gotten up to the level in the 5 whys that is starting to show the dysfunction, that we believe we have to know how something is going to cost before we're willing to buy it. So there is no replacement in my approach, the way I think about it, in a no estimate way, if we still have to answer the question as to how much will this cost. What they really want, often, is not an estimate but a price. And so people then use these kinds of, I would consider sort of tricks, we'll give them a range. It will cost as little as this and as much as that. Who really cares how little it will cost. Just guarantee it won't go over the higher price, okay. Do it as cheap as you can but don't go over that higher range. Okay, and then once we give that we want to give them a confidence level. We have a 80% confidence that we are correct with this estimate. So these things are just estimates on our estimates. An estimate is an approximate anyway, which implies, or really states, an approximate means there is a kind of range, about 2 million dollars. So if our industry is geared towards the idea that we have to know what this will cost and what the benefit will be before we can do it we are ignoring things which are way more important and it comes down to this in my opinion. We have to get really good at software development and then see what management mechanisms we still need to put around it. Not the opposite. So I think a lot of the purpose for those estimates and trying to know ahead of time what something will cost it sort of based on the idea that we are not very good at that. And so we are always way off. So we need some legal stuff to surround our business with. And if we could just find some option, and I think the industry is heading in the direction of a good option, if we could find some option that allows us to deliver value all the time very quickly we could easily steer to a good result, and we care much less about knowing how much will it cost to get something. Now that's hard for a lot of people to understand, I'm not asking for people to agree with me, actually. I'm really looking for people who are sort of along their path far enough to say hey that kind of makes sense to me. And then when I have a conversation with them I build on it, I learn more. What are you trying, what are we trying, you know we share those things. That's what I'm interested in. Did that make sense to you, it's the wrong question, if these people need an estimate, they need a cost, then our only choice is we want customers like that and that's a good system to use. I'm not sure that is and I think that whole model needs to be scrutinized. And estimates are simply a symptom of a possible problem upstream somewhere, and that's sort of what I've been sharing right here right now, is that idea. There's nothing wrong with an estimate. An estimate is just somebodies calculated, approximate judgement of what something might cost. There's other ways to do estimates but that's how we typically do it. Often it's just a guess, not always. But it's based on best effort or best understanding of something. And of course we are trying to get that best understanding at the time when we have the least amount of information to be able to make a reasonable guess or a reasonable calculation.

**This Agile Life:** Part of the problem comes to me when we are dealing with people who are not accustomed to software development and how it works and who are used to buying something that has a sticker on it and it is for a particular price. And so it's very hard to communicate to those people why estimating is so deceptive, why giving them a number for something nobody really understands yet might give them some idea of where it could end up but could be completely wrong it either direction.

**Woody Zuill:** So you're speaking to something that's very important, but it's this. We want a certainty about the future. We want to be able to control the future. And when we get a price for work that we feel is reasonable then we can make a decision. But it's one thing to go into a department store to buy a television set or a refrigerator, well yeah, there's a price right on it. We don't go up to them and say how much do you estimate this refrigerator will be? Well, there's a price right on it. But if you went in there, I want a replicator, like I saw on TV the other day and I ask it for tea, earl gray, hot, and it just makes it for me. It materializes out of nowhere, what's that going to cost. That's an absurd example of course, but that's sort of, a little bit what software development is about. The requirements for that refrigerator can be seen in the refrigerator itself. We can open it up and measure how much it holds. We can look in the freezer compartment. We won't know ahead of time how quick the dang thing will freeze up, but we're going to guess, hopefully we're buying a good brand, it's going to work okay. That's the world a lot of people live in. I'm not suggesting I have answer for that. That's why I want this conversation to be happening in our industry. The first time ever I talked about this, essentially, and this was a very calm little talk I was giving on the kinds of things we need to question, I was actually to some degree over shouted at, I don't know if that's the right word because I wasn't shouting, by the audience who started arguing with each other about why we need estimates. And there were 3 different ideas about no, that's not what need them for, we need them for this. Well that doesn't work this is what we do. You know, it is a contentious topic and we need to work on that.

**This Agile Life:** Well what's the next step for people, once they acknowledge there are no guarantees with estimates because the definition of an estimate is a guess, how do we evolve from a place where we need estimates to a place where we need them less or not at all.

**Woody Zuill:** Well first of all, this started out for me 15 years ago in software development. Prior to that I used some of these ideas in manufacturing, because I owned a couple of little custom manufacturing companies over the years and some other things, but the basic idea I noticed in software. 15 years ago I took a job, and that job was to manage a small crew of people because the main guy had to go fly to some customers to get some requirements nailed down. And as I worked with them I was very thrilled to start learning their process. But now that I look back on it I would consider what they were doing was proto-Agile. It was before Agile. It was just before the first books on extreme programming were published but it was amazing thing, they weren't using estimates. The customers that they worked with were basically paying for the time of the shop, for the time of all of the developers, a weekly rate so to speak, at least that's my recollection of it, and they were getting an awful lot done, I won't go into details of all that, but essentially they were doing all the things we know of as Agile now. Customer collaboration. Working software being delivered rapidly. Responding to change as we discovered things. And it was a big time about individuals and interactions. The main guy would just fly to the customer, quickly learn from the right people there what was the stopping point or the blocking point on their project, communicate that back, fly back and as soon as he arrived we went over a quick tentative design and we started coding and by the end of the first day we had stuff we could start testing and/or delivering. Over a two week period or so we'd be ready to move on to the next thing. So without going into any more details on that I saw what I considered a really wonderfully way of working. And I also way patting myself on the back because I thought that I was finally in a world where people understand what's important. And then I, that was a 3 month project, went off to another job where it was very much more traditionally managed. They were trying to do a spiral model, but an interesting thing happened on the way to #noestimates. And if you like I'd like to share that part with you. They were doing 6 week iterations, and I won't go into the specifics of it, but they were trying to do something like a spiral model. Which is sort of okay but it doesn't lead to having anything deliverable. It leads to having some chunk of a project done. It's more about getting chunks of the project done. And at the end of every 6 weeks they would have a sort of a lessons learned. Do you remember having those, they were sort of popular back in the day. These lessons learned two main things would show up. The first one was, the requirements weren't really locked down so they kept changing things during this time. We have to get better at locking things down. And the other was, are estimates are way off. Partly because they weren't locking things down, but partly because we had no idea how long these things would take. So the take away from the meeting, the first one, was we have to get better at knowing the estimates up front and telling everybody you can't change them while we are working at it, very non Agile. The other was we need to get better at our estimates. Well the main managers and a lot of the people on this project had been in this for quiet a while and worked for some huge firms that focused on doing things like estimates. There were 200 developers there. So maybe they can get better at it. And I'm always okay with the idea that the first one is free. We notice a problem, let's try to get better. Well at the end of the next 6 week cycle we had our lessons learned and what we discovered the two main things were that our requirements were constantly changing and that we need to get better at locking them down and understanding what we were going to do upfront and the estimates were no good because of those things and we are not very good at estimates. So we got to get better again. Everybody buckled down to do that again. Now the first one is free, in my book, the second one is showing us that we have a pattern. We can never see a pattern from one, right, but we can start saying there might be a pattern when we see two. But dang on the third one there's a pattern. And of course that's what happened after the next 6 weeks. So, that's the end of that story almost. That started me thinking, and I brought it up in the meetings there, it didn't come to any end. But hey, we're not looking at the problem, here guys, we're looking at a symptom. We're looking at a symptom and we are dealing with it as if it's the problem. The changing requirements and having to lock it down is a solution. The locking it down is a solution to a symptom. The we need to get better at estimates because we're not very good at them is dealing with the symptom. Is that we are probably trying to make our decisions based on the wrong things. Maybe, maybe not. I look on estimates as merely being the smell. I hope you guys are all aware of the term smell in software development. It doesn't mean there is a problem. It means there's a hint that there might be a problem. So if we take estimates as a being a hint that there might be a problem then we can start following that trail down and finding the root cause of the problem. But if we're not aware of that being a smell, or the possibility of even being a smell then we won't be able to solve that ever. So that's what important to me about the #noestimates. I call this the cycle of no improvements. We're continuous non improvement. So if we get trapped in the cycle of non improvement we have to stop, we have to look and determine, pay attention, why do we have to keep trying to solve the same problem. Maybe it's just a symptom.

**This Agile Life:** Are you espousing the ultimate solution is to get rid of the estimates all together. I think that's ultimately the panacea of what some people see of #noestimates.

**Woody Zuill:** That's not what I'm proposing at all. As a matter of fact there are many good uses for estimates. But I'm talking about a very specific kind of estimate. It's the estimate for time, effort, cost for doing a certain chunk of software development. We use estimates for many other things and it is fine in those cases. But like everybody always brings up, I don't know why, if I'm going to get my kitchen remodeled, how many people got their kitchen remodeled for goodness sake but I hear this one all the time. If I'm getting my kitchen remodeled I want to know what's it's going to cost. Well okay, how much are you willing to pay to find out how much it's going to cost. Are you willing to pay a very high price or do you want to have a free estimate. Because once they start ripping out your cabinets and yank out the sink and they find out there's mold in the wall and rotten boards in the floor you're probably going to pay a lot more than a kitchen remodel to get that thing put back together. And you can't just shove the cabinets back in, because they just yanked them off the wall using a sledge hammer and a pry bar. So you know I would put this in a whole different frame. What if there's a different way to go at it. So this isn't about getting rid of estimates. This is about noticing when we are in this cycle of non improvement, or no improvement is how I'd like to say it, and then tracing that up and following to where this is coming from. Why are we doing these estimates and if this isn't serving us well can we find some other way to do things. It's simple in my opinion but obviously there are few people who agree. I'm okay with that.

**This Agile Life:** One thing as you were speaking there, it occurred to me, I think what you are trying to get at as well, and correct me if I'm wrong, you see #noestimates as a class of conversations that should be going on around Agile development. And #noestimates just happens to be the one that is a lightning rod, but it leads to all these others.

**Woody Zuill:** For the moment. This is just one of many things, because the whole reason there's a Agile manifesto and people are trying to learn about Agile has been because of many failures that have occurred. People being burnt out, the sustainability aspect of it, complicated projects which cost way too much, don't deliver anything of value and cost way too much. All those things were estimated in those early days, the between days I guess, in the 90's. So yeah, this is just one thing, this is only one little bit and estimates were just a smell. I like to be able to talk about it. Anybody who wants to talk about it I invite them to come and talk with me. If they don't like me they don't have to talk to me, they can talk with someone else, but let's be talking about it. By the way I don't care if you're completely against my ideas. Just talking about gets it in front of people. It keeps it in front of people. If you hate me tweet that. I love it. Because the more attention we get to this topic the more likely people will be talking about it. And if the end result is things don't get any better at least we gave it a try. That's what I'm for.

**This Agile Life:** What are you finding are some of the root causes for estimates. If estimates are a symptom what are the root causes you're seeing.

**Woody Zuill:** One example is, which was brought up earlier here, we need to know the cost of this so we can decide whether we want to do it or not. So that's not even a root cause, that's an in between. Because that's getting us up to the path of what is business really about. So let's just make an example, let's make an example like this. I'm a salaried employee where I'm working. That means I have a specific income. If I want to buy something I have to know I can afford it, because I only have so much money coming in, or I could do like my dad told me when I was a kid, he said go get another job. You want to buy that more expensive mini bike get some more hours, pull some weeds. And so if you get what I'm saying here, when you have this fixed amount of money you have to determine can I get the thing I want with the money I've got or find something I can afford. So, I'm going to put you on the spot. Is that what business is? Is that an appropriate decision in business. Is that the kind of decision we need to be making?

**This Agile Life:** To just decide if you can afford something or not?

**Woody Zuill:** Yeah, can we afford this based on what we think our budget is, what we want to spend, we want to make a decision based on what money we have, about something we want to do.

**This Agile Life:** That seems like only half of the question, or part of the question.

**Woody Zuill:** Cool, tell me the other half.

**This Agile Life:** The next part what are we going to get for what we're buying.

**Woody Zuill:** Okay, let's put both of those into the mix. We're going to buy this, we can afford this. What's wrong with that picture in business.

**This Agile Life:** One of the things that comes my mind is what's the value for the business to invest the money into that product, because if you understand what the value is, if I know that if I create this piece of software I can generate 30 million dollars worth of revenue over the next two years then I don't have worry so about how much it will cost me. I can spend 2 million dollars and say sure that's great because it's a small percentage of what my value proposition is for doing the work. And there are all these people today that are talking about stopping these kinds of conversations about dollars for hours and starting to talk about value and a percentage of the value.

**Woody Zuill:** So there's always a risk what we thought we would get from something we don't actually. It's funny you bring up the 30 million because it was not very long ago that somebody proposed a project they thought would bring 30 million dollar additional value to a company that I was talking with. And I don't mean to be trapping you in this conversation but first of all, the value estimate is way more difficult than the cost estimate! So, if we know if we do this work we are going to make 30 million dollars it almost doesn't matter how much we are going to pay for that work because it is self sustaining. Whatever we pay for it if it's going to make us more than what we're giving in then there's not much decision to make. We could say we have limited resource but if it's paying for itself, do we have limited resources? So maybe I'll get to the end of this. I don't want to make you guys think too hard this late at night. But here's the thing, I've been in business much of my life and it's not about how much we think we can spend but how much we can generate ongoing. If we can do a little bit today that increases our income a little bit tomorrow we can do as much software development as we want as long as we are always generating more and more and more. It just has to be sustainable as a matter of fact. Lot's and lot's of people, business people much smarter than me will argue with me this is baloney, I'm fine with that, you know, this is the way I see it. It isn't about do we have enough money to do this project. It flips the concept over, we have yet learned how to deliver sufficiently well tiny little bits of things that deliver value quickly. If we got good at that, every project would be self sustaining. As soon as we recognized after a few sprints, or whatever you want to call them, we don't do sprints, but after a few iterations or a few weeks, if we discovered we can't find a way to generate a little bit of value we might start saying let's move on to something else. Let's take what we've learned here and do something else.

**This Agile Life:** So what's you're talking about there is not just developing software and doing that at a reasonable rate but also developing it and deploying it to be able to monetize it. Is that correct?

**Woody Zuill:** Yeah, so the basic idea is that where are skills have to be change, that's why we can't say what will we do instead of estimates to answer the question how much will this cost you. Now there are people that are doing that as well. You're aware of Vasco Duarte probably and he uses a model where after the first few weeks he can project out pretty well what's going to take a certain amount of work that we've already set out to do. It's not the model I follow but I value any attempt to do something other than estimates as an experiment. And he's had some pretty good success and he has a very very compelling set of stories that are based on real life experiences that people have had at real life companies. So, yeah, it's about looking at this from a different point of view. If we think of software development as being a cost center where we need to control the costs, we're pretty much losing the value of it as a value generating mechanism. And when we say we only have so much money then we are sort of admitting we don't have a way to make sure this thing is going to pay. I've worked on many projects, I don't know how many but many, where you got to the end of it nobody really wanted it. Nobody really used it. Both internal and external things. And no matter what you tell people that hey would should try to deliver a little bit early and start discovering this, it's hard to make that case. That's why I want us to talk about these things. Let's see what we can do. So I've written several examples of things I've done. But maybe we'll get to the how sometime around here and why I'm reluctant to put too much effort into thinking about the how.

**This Agile Life:** Before you do that, another reason I was thinking of estimates, or the root causes for why people think they need them is trust. That they feel like they need something that they can hold up later when things go wrong, but you told me it was going to be this. And whether they actually do that or not they feel like they need that. At least that's the experience we've had.

**Woody Zuill:** I don't think that's uncommon. I think that's actually a reality. Contracts exist because people have disappointed others in business transactions. We even have marriage contracts. That's trouble, I can't fix that for people, but I do believe that we don't need, trust is something that's a tricky thing. We don't need as much trust as we think we do. We need a mechanism where it's hard to break our trusts because we are always delivering the software. And when we're not we can make a decision without losing much. We don't pay so much. Part of what you're talking about is pushing the risk down to the people who least can handle the risk. If we start at the top and we basically want the people at the bottom, which are the ones who are going to do the work, to make a commitment to something that we can hold the to later we kind of have a broken model anyway. I think that's broken. It's got to be collaboration. And that's why I like Agile so much, it's about customer collaboration. Let's work together, let's find a model where we can work where you feel comfortable week after week because you are getting something for your efforts. I've worked on projects where literally people stopped asking for estimates because they were just trying to keep up with coming up with the next thing they wanted us to work on. I love that. As a matter of fact, the biggest payoff to doing something like this #noestimates concept and that means if you can physically deliver something frequently into real use we start steering towards the things of real value and we do a lot less of the things which have no value. And then we became bored with the project. And that is the customer, the managers, the product owners, whoever start getting bored with that product. They say that's enough, we got this other thing we want to work on. And we've only spent 20% of what we would have traditionally spent, if we would have built all the things nobody cares about. I call that the 80/20 80/20 rule. You may have heard me talk about that before. You've heard about that parental principal right? I learned about it long ago and I think, I could be wrong, it's roots come from somebody who observed that 80% of the peas in the garden came from 20% of the pea pods. That's a pretty startling number. Why does this little bit produce so much and hardly anything else is producing something? Now whether that is true or not I don't care much, I like the idea, it's a nice place, I like things which come from the garden. It's a good story. If you look it up and find out I'm wrong just don't tell me. Cause I'm such a stubborn person, my mind is unchangeable. Okay, of course that was a joke, but believe me on twitter someone quote on that and forget to mention it was a joke. Okay, so taking that I heard Jeff Sutherland speaking at one of the Scrum or Agile conferences recently where he said let's just do the 20% and not the 80% which doesn't bring much value. And there's a reason for that. It's cause we can't tell ahead of time. We have to discover that. We can guess at the ones which will bring value but we don't know that. It's always a guess. If I knew I can make 50 million dollars by doing this 10 million dollars worth of work there would be nothing stopping me. We would do that every time. We can't know that. So we often inflate what we think we'll get just so we can get the project going. We won't go down that path right now. So here's the point, if we could discover the 20% that's going to bring the most value of the features, the 20% of the features, what if we could discover the 20% of any particular feature that will deliver 80% of why we want that feature. So we're going to end up doing hopefully something as close as possible to only 20% of the features and we're only going to do something like 20% of the work expected out of each feature or the work we would have put into each feature. Then we got this, what I call, 80/20 80/20. I don't explain it very well, but you brilliant people out there can figure that out.

**This Agile Life:** I've got example where I use estimates today and I was wondering if we could use that as a springboard into the how. Today on my team we are using estimates so people have a level of comfort when they commit to work over like a weeks worth of work. So they look at what they've done before, they come up with a relative estimate and then that gives them some since of reality check that I'm comfortable committing my time, my hours on the project towards this goal and I feel relatively confident that I'll be able to accomplish what I am committing to. So if I'm going a #noestimates route how would you coach me to replace the estimates with #noestimates.

**Woody Zuill:** What is the purpose of that? Why are we doing that? Why would we want to do that?

**This Agile Life:** We don't want the work to roll over?

**Woody Zuill:** Why don't we want the work to roll over?

**This Agile Life:** Because it appears we are not accomplishing the amount of work we planned to accomplish.

**Woody Zuill:** So if our measurement is that we accomplish the amount of work we set out to do then all we got to do is always bite off a lot less and stretch it out to the last minute so that we can deliver it as per what everybody thought we should. I'm a little unclear as to what the real purpose of that is. It's like what we want to do is know how much we can do in this next week so we can see if we did that much in the next week. Is that what we're trying to get? I'm not sure what we're trying to get there.

**This Agile Life:** So let me jump in here because I think that I did this when I was in high school. I did only enough work to be able to get a high enough grade that my parents wouldn't yell at me. And I think that's what's happening.

**This Agile Life:** I'm certain that there is a lot to that, right. But we're trying to come up with an amount of work that is attainable without people killing themselves but also without loafing in the hammock in the back yard.

**Woody Zuill:** So the question then is, I do hear this a lot, but I still kind of wondering about it. The question for me is, what benefit is that bringing us, what good is that? So if you're saying we're going to do this so we don't goof off? Is that what we're saying?

**This Agile Life:** To some extent but I think we're also trying to do a little bit of future prediction on when a feature is going to be finished.

**Woody Zuill:** So what I'm proposing in the way I approach this, so if you knew everything you needed to do to get that feature done then this might help a little, what you're suggesting. But I believe software development is mostly discovery. And what we need to good at is the opposite of trying to figure out how much we can get done on something we don't know what it is yet. I think I already mentioned this saying of mine, it's in the doing of the work that we discover the work we must do. If we knew ahead of time it's probably too mundane for us to be bothering us doing anymore. If our work is so mundane that we can accurately estimate it then maybe we need to figure out how to automate that, instead of us doing it over and over and over. So, you know, in the old days if we found we were writing a bunch of crud objects, database access and creation and retrieval and whatever, well then let's automate that. We don't need to write that over and over. We understand the pattern, it can be generated. And a lot of people do that now days, or use systems that don't even need the code for it, because they can extrapolate out the conventions you are using as to what to do. So, if it could really pay off for us that somehow we could get better and better at guessing how much it is going to take to get a certain amount of work done then maybe keeping track of all of that is useful. But what I'm suggesting is that we need to get really good at software development so that it doesn't matter anymore. So if we're delivering something into production and real use everyday the feedback loop is so short that we're going to start discovering when things are valuable or not very quickly. And that's way more useful. Because figure out how to work on the right things. Is way more useful then figuring out how to work on the things within a schedule.

**This Agile Life:** Do your people actually really loaf? I don't know of a software developer that actually loafs. They actually enjoy what they're doing and so they will do it at the rate that they can every time, no matter what they're doing.

**Woody Zuill:** Talking about putting someone on the spot.

**This Agile Life:** What is the amendment you plead when you don't want to incriminate yourself?

**This Agile Life:** The fifth.

**This Agile Life:** I plead the fifth amendment.

**Woody Zuill:** So let's use this as very good example of why I think estimates are a smell. Because we do have these kinds of issues we need to deal with we need to do a 5 why's on why do we feel we need to hold people to the fire to get this commitment. Because most commitments are about compliance. Why do we feel that we need that? Now I'm not saying that it is true in anybodies particular situation, and a little but of goofing off and slack is actually useful inside a software development team. Keeping everybody interested, finding things to be interested in is very important. If what we need is to get everybody's nose to the grind stone we're working in a broken world. We need the exact opposite. And I have found it is rarely is that people are not motivated.

**This Agile Life:** Yes, let me be clear it, that's not the why as to why this is going on. I think the real why is that if I have a product owner, his fizz buzz product is out there and he wants to release the next feature for fizz buzz, he wants to send out some marketing emails and he's got to work with a copy writer to get some of that stuff done and so you're trying to get a couple threads of activity to kind of land in about the same time frame, I'm not going to be able to tell you it's going to be done Wednesday March x that's it's going to be done but I want to have some knowledge that in the next month or so this thing is going to be ready.

**Woody Zuill:** Okay, so in this case what we're exposing is that if we can work rapidly and deliver bits of value quickly and continuously then it's a lot less important for our software development to know when will something be done because something is done everyday. If we need to know when a full feature will be done, we're kind of breaking the 80/20 80/20 rule where we're trying to discover what's the least we can do that's is going to satisfy the need. What's the least we can do, because honestly a project with 50 features that could have had 10 is 50 times harder to maintain, 50 times harder to move forward with. It's a thousand times harder to move forward with. That there's a compounding, each new feature you add, simplicity, simple is much better. 50 features is often way too many, but we are in this world where we think we need to market those features. But there's a gap or there's a problem here which we would discover. Sort of a theory of constraints thing, where's the bottleneck. If the bottleneck is that marketing needs a long lead time to be able to do well, maybe marketing could take advantage of some Lean thinking and figure out how to be prepared to deliver a good marketing campaign as soon as something is ready to be moved to the market. If we have these long gaps, I've worked in marketing stuff myself, I think that we kind of trick ourselves into thinking that's the way it has to be. So again, if we need to know ahead of time then we can just say we're all done, as soon as you are ready for your marketing campaign you can deliver that too. It's that simple. If we're trying to beat the market to the thing. Then marketing needs to get on board with being ready to market anything, because they should know what we're working on, and they should know at the minute it looks like enough to sell that they should be ready with their campaign. I'm not knocking marketing guys, I love them. That's a lot of what business is about, is getting the word out.

**This Agile Life:** Can they adjust their campaign as you go the same way you add features as you go? Can they be an Agile marketing campaign?

**Woody Zuill:** Yeah, is there a way to marketing Lean? I bet there's a lot of people writing books about that right now.

**This Agile Life:** If there's a big medical convention coming up and I'm selling a piece medical software that I want to be able to demonstrate this particular new feature, it's one of the aspects of the Get Kanban game is that there's a conference coming up and you have to have this feature ready or bust, how do you deal with that.

**Woody Zuill:** I kind of guess that's a likely broken business model. I'm not saying I have an answer to fix these kind of broken business models. But I do think we need to look at better ways at doing business. That might be a dream world or something, but realistically why not think about it. Why do we have to say the way the world is today is the way it should always be. We can change. Imagine if business the way was done 80,000 years ago we were still doing that way. I grunt at you, hand you a rock, you grunt back, give me a stick.

**This Agile Life:** Or hit you in the head with a rock, you better watch out, I'm mean.

**Woody Zuill:** That's happened to me a lot. You get my picture? What we do for business today has only been around a short while in comparison how long humans have been around, depending on your particular domination I suppose. These idea are just contrivances of humans. If we contrived that we can manage production only through estimates then we could potentially contrive to do it without estimates. It's a guess always no matter what tomorrow will bring. I have a feeling, four years ago there was a nuclear disaster in Japan. If they would have known ahead of time to design their system a little differently, which would basically they had planned for the highest possible tide problems, and it didn't turn out to be sufficient, boy I think they probably would have thought about doing it differently, I would hoped that anybody would have. Because we are often surprised by things, this sort of black swan thing you hear about it. I don't have answers about that. Gosh, if people are turning to me for answers I'm turning back to them. We share is this burden together. Let's figure these things out. If you insist we can't do better then maybe I need to be talking to someone else, but at least we're giving it a shot. So maybe I'll bring us something which will end up being my wrap up. I was exposed to this book by Tobias Mayer recently, you probably know who he is, he wrote the People's Scrum book, are you familiar with that? He tweeted out about a book, The Answer to How is Yes. It's by Peter Block. And this is why I'm really reluctant to give people how, about things like Mob Programming and #noestimates. If you instantly always jump to the how question you are really missing the more important thing, which is sort of the why question. And all I'm asking is people are answering for themselves the why question in their environment. If estimates are real, and useful for you, then do them. But know that they're real and useful for you, rather than guessing at it. Or the really, if I'm against anything, it's the default, dogmatic use of estimates for making decisions. And this is what it comes down to. It's easy to prove, I think, that an estimate makes it easy for us to make a decision. An estimate this project will cost 1 million dollars and I estimate we'll get back 30 million dollars. I estimate this project will cost us 30 million and it will get us back 1 million dollars, which one should I do? Well, it's easy to make that decision. I want the one that gives the big return. But I don't believe that estimates gives us a way to prove that we're making a good decision. I'm more interested in good decisions than making decisions. Let's make good decisions. That's what this is about. And if somebody later on proves me wrong, I don't know what there's to prove, I'm just asking the question, if somebody wants to prove that we shouldn't be questioning, they're kind of up against it, because that sort of what the world's about. This is interesting to me, it might not be interesting to anybody else.

**This Agile Life:** I don't think either or sort of decision in business is that common.

**Woody Zuill:** I come up on it all of the time.

**This Agile Life:** You see things where we have two possible things to spend on and one is going to make us 30 million and cost 1 and the other is going to make, and you have two different ways to go on it?

**Woody Zuill:** This is much of what the budgeting process in many companies is about. We have managers who have people who are proposing projects. We need to replace our fleet trucks. It is costing us x dollars to maintain those trucks, we need some new ones. The new ones meet some new regulations we have to do. Somebody else says we need to buy a new machines for this department, and we need to get software for that department, we need to write software for this other thing. Those are looked at by teams that look at things we might do, determine at what level we want to do these things. That's sort of the way a lot a budgeting, I should put it slightly different, that's sort of the budgeting process. Is we're trying to decide what we're going to spend our money on.

**This Agile Life:** In the business level you're right. From a software development standpoint though I don't see two different software projects being decided that way and maybe it's just I haven't been experienced enough in that area. Most of the time we have a problem and we need a solution and this is the solution and it's really about how much are we going to save or make or whatever with this solution to a problem.

**Woody Zuill:** I'm using a common example people that have brought up to me, should we do project A or project B. But it's also should we attempt a fuller solution of problem A or lesser solution of problem A. Or should we even try to solve problem A. What are the workarounds. What could we do instead. So we're still trying to make these decisions. I was just using the A or B example, there are many other examples. So that's just a common one. But very often in the overall business we are making decisions across many departments with many concerns. So I think these are typical problems. Whether it's just one software project against spending the same money to build a new building. And there are areas where sometimes knowing all the costs upfront are absolutely wonderful. I don't have a problem with that. It where you can actually know it that it can be a benefit. It's much easier, where going to buy 3 trucks, how much to trucks cost. We have these requirements. We go out, we get people to give us estimates, which are really prices on what they are willing to sell us a truck for. That's an easy problem to solve. But now we want, should we do this software project, how much will that cost us so we can make this decision. I think overall I'm glad this is a conversation we are having in our industry right now. The #noestimates idea is let's make sure if we're using estimates they're really bringing us value and if they're not let's figure out why we are making these estimates and make sure that we are doing something wise rather than just by default using estimates because it makes it easy to make decisions.
